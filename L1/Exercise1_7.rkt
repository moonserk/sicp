#lang racket

;Упражнение 1.7.
;Проверка good-enough?, которую мы использовали для вычисления квадратных корней, будет
;довольно неэффективна для поиска квадратных корней от очень маленьких чисел. Кроме того, в
;настоящих компьютерах арифметические операции почти всегда вычисляются с ограниченной точ-
;ностью. Поэтому наш тест оказывается неадекватным и для очень больших чисел. Альтернативный
;подход к реализации good-enough? состоит в том, чтобы следить, как от одной итерации к дру-
;гой изменяется guess, и остановиться, когда изменение оказывается небольшой долей значения
;приближения. Разработайте процедуру вычисления квадратного корня, которая использует такой
;вариант проверки на завершение. Верно ли, что на больших и маленьких числах она работает
;лучше?

(define (square x)
  (* x x))

(define (good-enough? guess x)
  (< (abs (- guess x)) 0.001))

(define (improve guess x)
  (average guess (/ x guess)))

(define  (average x y)
  (/ (+ x y) 2))

(define (sqrt-iter guess x)
  (if (good-enough? guess (improve guess x))
          guess
          (sqrt-iter (improve guess x)
                     x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 9)